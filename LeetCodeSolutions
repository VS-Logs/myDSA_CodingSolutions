<b>LeetCode Questions:</b>
Two Sum: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
Input: nums = [2,7,11,15], target = 9, Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
var twoSum = function(nums, target) {
    for(var i=0; i<nums.length; i++){
        for(var j=1; j<nums.length; j++){
            if(nums[i]+nums[j]==target){
                return [i,j] //[nums.indexOf(nums[i]),nums.indexOf(nums[j])]
            }
        }
    }    
};
------------------------------------------------------------------------------
var twoSum = function(nums, target) {
    const map = {};
    for(let i = 0; i < nums.length; i++){
        const diff = target - nums[i];
        if(map.hasOwnProperty(diff)){ //checking the new diff value is already present or not
           return [map[diff], i]; //[value, index]
		       break;
        }
        map[nums[i]] = i; //console.log(map) //we storing the exact value not diff
    }    
    return result;
};
console.log(twoSum([2,7,11,15], target = 9))
=========================================================================================================================================================================
Palindrome:
var isPalindrome = function(x) {
   if(x<0) return false;
   if(x.toString()===x.toString().split('').reverse().join('')) return true;
   return false;  
}
-------------------------------------------------------------------------------
var isPalindrome = function(x) {
   let len = x.length;
   if(x<0) return false;
    for (i=0; i<len/2;i++)
    {       
       if (x[i]!==x[len-1-i]) return false;  
    }
    return true;  
}
===========================================================================================================================================================================
Longest Common Prefix:
var longestCommonPrefix = function(strs) {
let ans = ""; var strs= strs.sort();
  for (i in strs[0]) { //i means 0,1,2
    if (!strs.every((el) => el[i] === strs[0][i])) { break; } 
      //every function return true/false usually //el representig each character of the items of 
      //an array which we are compairing with f,l,....
    ans += strs[0][i];
  }
  return ans;
};
--------------------------------------------------------------------------------
var longestCommonPrefix = function(strs) {
var arr = strs.sort()
  var i=0;
  while(arr[0].length>0 && arr[0].charAt(i)===arr[arr.length-1].charAt(i)){
    i++;
  }
  console.log(arr[0].substring(0,i)) 
  return arr[0].substring(0,i)
};
------------------------------------------------------------------------------
var longestCommonPrefix = function(strs) {
  if (strs.length === 0) return '';
  let r = '';
  for (let i = 0; i < strs[0].length; i++) {
    for (let j = 1; j < strs.length; j++) {
      if (strs[0][i] !== strs[j][i]) return r;
    }
    r += strs[0][i];
  }
  return r;
};
========================================================================================================================================================================
Valid Paranthesis :
var isValid = function(s) {
    let map ={
        "(":")",
        "{":"}",
        "[":"]"
    }
    let arr = []; //its example of stack i.e, 
    for (let ch of s){
        if(map[ch]){ //checking if inside in map object
            arr.push(map[ch]);
        }
        else if(arr.length>0 && arr[arr.length-1]===ch){ //checking length>0 otherwise give undefined
            arr.pop();
        }
        else {
            return false;
        }
    }
   return arr.length ===0 ? true: false;
};
--------------------------------------------------------------
const isValid = (s) => {
  const stack = [];
  for (const c of s) {
    if (c === '{' || c === '[' || c === '(') stack.push(c);
    else {
      const p = stack.pop(); // No need to check for empty before popping (returns undefined)
      if ((c === '}' && p !== '{') || (c === ']' && p !== '[') || (c === ')') & (p !== '(')) return false;
    }
  }
  return stack.length === 0; //true
};
=======================================================================================================================================================================
Contain duplicate: 
var containsDuplicate = function(nums) {
    return nums.length !== new Set(nums).size // As Set only contains non-duplicate values so new Set(nums) will remove all duplicates element then you can 
    //check if the lenght of the array is same as set if same means no duplicates element otherwise duplicate is there
};
---------------------------------------------------------------
var containsDuplicate = function(nums) {
    return nums.length > new Set(nums).size;
};
=========================================================================================================================================================================
Remove Duplicates from Sorted Array:
var removeDuplicates = function(nums) {
    let prev = null;
    const k = nums.length;
    for (let i = 0; i < k; i++) {
        if (prev === nums[i]) { //for duplicacy won't work
            continue;
        }
        prev = nums[i];
        nums.push(nums[i]); //[1,1,2,1,2]
    }
    nums.splice(0, k); //index, no. of elemnets from that index to delete the exact array
};
=========================================================================================================================================================================
Fibonacci Number:
const fib = N => {
    return (N < 2) 
        ? N 
        : fib(N-2) + fib(N-1);
};
------------------------------------------------------
const fib = n => {
    const memo = {};
    for (let i = 0; i <= n; i++)
    {
        if (i < 2)   memo[i] = i;
        else memo[i] = memo[i-2] + memo[i-1];
    }
    return memo[n];
}
------------------------------------------------------
const fib = n => {
    let arr = [0, 1];
    
    for (let i = 2; i <= n; i++) {
        arr.push(arr[i-2] + arr[i-1]);
    }
    
    return arr[n];
};
========================================================================================================================================================================
 Search Insert Position:
var searchInsert = function(nums, target) {
    for(let i=0; i<nums.length; i++) {
        if(target === nums[i] || target < nums[i]) { //  if (nums[i] >= target){
            return i
        }
    }
    
    return nums.length
};
---------------------------------------------------------------
var searchInsert = function(nums, target) {
    let start = 0;
    let end = nums.length - 1;
    while(start<=end) {
        const mid = Math.floor((start + end)/2);
        if(nums[mid] < target) {
            start = mid + 1;
        } else {
            end = mid -1;
        }   
    }
    return start;
};
console.log(searchInsert([1,2,4,5],3))
============================================================================================================================================================================
Roman To Integer:
var romanToInt = function(s) {
    const map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000};
    let num = 0;   
    for(let i = 0; i < s.length; i++) {
        const curr = map[s[i]], next = map[s[i+1]];
        if(curr < next) num -= curr;
        else num += curr;
    }
    return num;    
};
console.log(romanToInt("LVIII"))
========================================================================================================================================================================
Valid Anagram:
var isAnagram = function(s, t) {
    if (s.length !== t.length) return false;
    return s.split("").sort().join("") === t.split("").sort().join("");
};
-------------------------------------------------------------------------
function isAnagram(s, t) {
  if (s.length !== t.length) return false;

  const map = {};

  for (let c of s) {
    if (map[c] == null) map[c] = 0;
    map[c]++;
  }

  for (let c of t) {
    if (map[c] > 0) map[c]--;
    else return false;
  }

  return true;
}
console.log(isAnagram("aman", "aamn"))
=======================================================================================================================================================================
Length of Last Word:-
var lengthOfLastWord = function(s) {
    const arr = s.trim().split(' ');
    return arr[arr.length - 1].length;
};
--------------------------------------------
var lengthOfLastWord = function(s) {
   return s.trim().split(" ").pop().length;
};
------------------------------------------
var lengthOfLastWord = function(s) {
   return s.trim().split(' ').at(-1).length;
};
----------------------------------------------
var lengthOfLastWord = function(s) {
    let len = 0;
    let hasStarted = false;
    for (let i = s.length - 1; i >= 0; i--) {
        if (s[i] !== ' ') hasStarted = true;
        if (hasStarted) {
            if (s[i] === ' ') break;
            len++;
        }
    }
    return len;
};
============================================================================================================================================================================
Majority Element:
var majorityElement = function(nums) {
    let map = {}
    for(let item of nums){
        if(!map[item]) {
            map[item] = 1;
        } else {
            map[item]++;
        }
        if (map[item] >= nums.length/2) return item
    }
};
========================================================================================================================================================================
Missing Number:
var missingNumber = function(nums) {
    nums.sort((a,b) => a - b ) 
    let count = 0
    for(let i = 0; i <= nums.length; i++) { // o (n)
        if(nums[i] == count) {
           count++
        } else {
            return count
        }
    }
};
------------------------------------------------
var missingNumber = function(nums) {
   nums.sort(function(a,b){return (a-b); });
    for(let i=0;i<nums.length;i++){
        if(nums[i]!==i){
            return i;
        }
    }
    return nums.length    
};
-----------------------------------------------
var missingNumber = function(nums) {
    nums.sort((a,b)=>a-b);
    if (nums[0] !== 0) return 0;
    for (var i = 0; i < nums.length; i++) {
        if (nums[i]+1 !== nums[i+1]) {
            return i+1;
        }
    }
};
==============================================================================================================================================================================
Reverse Vowels of a String:
var reverseVowels = function(s) {
    const VOWELS = { 'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'A': 1, 'E': 1, 'I': 1, 'O': 1, 'U': 1 };
    const arr = s.split('');
    let i = 0, j = arr.length - 1;
    while (i < j) {
        if (VOWELS[arr[i]] && VOWELS[arr[j]]) { //if both present in VOWELS
            [arr[i], arr[j]] = [arr[j], arr[i]];
            i++;
            j--;
        } else if (VOWELS[arr[i]]) { //if left side present in VOWELS then need to find right hand side so that's why j--
            j--;
        } else { //if right side present in VOWELS
            i++;
        }
    }
    return arr.join('');
};
----------------------------------------------------------------------------
var reverseVowels = function(s) {
    let left = 0
    let right = s.length - 1
    let arr = s.split("")
    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', "I", 'O', 'U']
    
    while(left < right){
        if(vowels.indexOf(arr[left]) !== -1 && vowels.indexOf(arr[right]) !== -1) // if both present in vowels
            {
                [arr[left], arr[right]] = [arr[right], arr[left]]
                ++left;
                --right;
            }
        if(vowels.indexOf(arr[left]) == -1){ //if left not present
            ++left
        }
        if(vowels.indexOf(arr[right]) == -1){ //if right not prsent
            --right
        }
    }
    return arr.join("")
};
------------------------------------------------------------------------------------
const reverseVowels = (s) => {
    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);
    s = s.split('');
    
    let l = 0, r = s.length - 1;
    
    while(l < r){
        if(vowels.has(s[l]) && vowels.has(s[r])){
            swap(s, l, r);
            l++, r--;
        }else if(!vowels.has(s[l])){
            l++;
        }else if(!vowels.has(s[r])){
            r--;
        }
    }
    
    return s.join('');
};

const swap = (arr, l, r) => {
    const temp = arr[l];
    arr[l] = arr[r];
    arr[r] = temp;
}
--------------------------------------------------------------------------
function swap(arr, idx1, idx2) {
    return [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];
}

// reverse vowel function
var reverseVowels = function(s) {
    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
    s = s.split('');
    let start = 0;
    let end = s.length-1;
    while(start < end) {
        if(vowels.includes(s[start]) && vowels.includes(s[end])) {
            swap(s, start, end);
            start++;
            end--;
        }else if(!vowels.includes(s[start])){
            start++;
        } else if(!vowels.includes(s[end])) {
            end--;
        }
    }
    
    return s.join('');
};
================================================================================================================================================================================
Single Number:
var singleNumber = function(nums) {
            nums.sort();
            for (var i = 0; i < nums.length; i += 2) {
                if (nums[i] != nums[i + 1]) {
                    return nums[i];
                }
            }
};
-----------------------------------------
var singleNumber = function(nums) {
    let hash = {}
    for(let val of nums){
        hash[val]?delete hash[val]:hash[val]=1;
    }
    return Object.keys(hash)[0]
};
-----------------------------------------------
var singleNumber = function(nums) {
    for(var i=0;i<nums.length;i++) {
        if(nums.indexOf(nums[i]) === nums.lastIndexOf(nums[i])) return nums[i];
    }
};
===============================================================================================================================================================================
Fizz Buzz:
var fizzBuzz = function (n) {
  const result = [];
  for (let i = 1; i <= n; i++) {
    if (i % 5 === 0 && i % 3 === 0) result.push("FizzBuzz");
    else if (i % 3 === 0) result.push("Fizz");
    else if (i % 5 === 0) result.push("Buzz");
    else result.push(i.toString());
  }
  return result;
};
---------------------------------------------------------
var fizzBuzz = function (n) {
return new Array(n).fill(0).map((item, num) => (++num % 3 ? '' : 'Fizz') + (num % 5 ? '' : 'Buzz') || '' + num);
};

->My first thought is to use the Array constructor. If you pass an integer as the only argument, an empty array with the given length is returned.
-> for loop that goes from 0 — 100
-> This code makes use of the ternary operator(condition ? value if true : value if false).
-> The condition that we’re testing is ++i%3. 
    If that is true, then '' will be returned. 
    If ++i%3 is false, then fizz will be returned.
-> For ++i%3, the increment operator is being used. Using the operator before the operand ++i will increment the operator i before returning it. This means that on our first pass through the loop, i will increase from 0 to 1.
-> For 1 % 3, utilizes the remainder operator. The remainder operator returns the remainder of one number divided another.
-> The remainder is 1 and thus our ternary condition is now simplified to 1.
-> 1 ends up not being a falsy value and therefor coerces into a truthy value.
========================================================================================================================================================================
Concatenation of Array:
var getConcatenation = function(nums) {
    return nums.concat(nums)
};
--------------------------------------------------
var getConcatenation = function(nums) {
   return [...nums, ...nums]
};
--------------------------------------------------
var getConcatenation = function(nums) {
    var n = nums.length;
   for(var i=0; i<n; i++){
       nums[i+n]=nums[i]
   }
    return nums
}
--------------------------------------------------
var getConcatenation = function(nums) {
    let n = nums.length;
    let ans = new Array(2*n);    
    for(let i = 0; i < n; i++) {
		// ans[i] == nums[i] and ans[i + n] == nums[i]
        ans[i] = ans[i + n]= nums[i];
    }
    return ans;
};
=========================================================================================================================================================================
Sort Array By Parity: 
var sortArrayByParity = function(nums) {
    var even =[], odd=[];
    for(var i=0; i<nums.length;i++){
        if(nums[i]%2 ===0){ even.push(nums[i]) }  
        else {odd.push(nums[i])}
    }
    return even.concat(odd);
};
-----------------------------------------------------------
var sortArrayByParity = function(nums) {
    var even = nums.filter(num => num%2 === 0)
    var odd = nums.filter(num => num%2 !==0)
    return even.concat(odd);
}
------------------------------------------------------------
var sortArrayByParity = function(nums) {
    var even =[], odd=[];
    nums.forEach((item)=>{
         item%2==0 ? even.push(item) : odd.push(item)
        
    })
    return even.concat(odd)
}
---------------------------------------------------------------
var sortArrayByParity = function(nums) {
    var even =[], odd=[];
    nums.forEach((item)=>{
         item%2==0 ? even.push(item) : odd.push(item)        
    })
    return [...even, ...odd]
}
-------------------------------------------------------------
var sortArrayByParity = function(nums) {
    var temp =[]
    nums.forEach((item)=>{
         item%2==0 ? temp.unshift(item) : temp.push(item)        
    })
    return temp
}
-----------------------------------------------------------
var sortArrayByParity = function(A) {
    return [...A.filter(v => v % 2 === 0), ...A.filter(v => v % 2 !== 0)];
};
-----------------------------------------------------------
var sortArrayByParity = function(A) {
  let i = 0;
  let j = A.length -1;

  while(i < j) {
    if (A[i] % 2 !== 0 && A[j] % 2 === 0) {
      let temp = A[i];
      A[i] = A[j];
      A[j] = temp;
    }

    if (A[i] % 2 !== 0) {
      j--;
    }

    if(A[i] % 2 === 0) {
      i++;
    }
  }

  return A;
};
=========================================================================================================================================================================
String Compression: 
/*var compress = function(chars) {
    var arr=[], count=1;
    //if(chars.length===1) return 1;
    for(var i=0; i< chars.length; i++){
        if(!arr.includes(chars[i])){arr.push(chars[i])}
        if(chars[i] != chars[i+1]){
            arr.push(count);
          count =1;
        }
        if(chars[i]==chars[i+1]){
            count++;
        }
    }
    return arr.length;
};
//console.log(compress( ["a","b","b","b","b","b","b","b","b","b","b","b","b"]))
*/
------------------------------------------------------------------
var compress = function(chars) {
    var arr=[], count=1;
    if(chars.length===1) return 1;
    for(var i=0; i< chars.length; i++){
        if(!arr.includes(chars[i])){arr.push(chars[i])}
        if(chars[i] != chars[i+1]){
            arr.push(""+count);
          count =1;
        }
        if(chars[i]==chars[i+1]){
            count++;
        }
    }
    return arr.length;
};
console.log(compress( ["a","b","b","b","b","b","b","b","b","b","b","b","b"]))
======================================================================================================================================================================================
Find All Numbers Disappeared in an Array:
var findDisappearedNumbers = function(nums) {
    var s = {};
    for (let i =1; i<= nums.length; i++) {
        s[i] = 1; //storing all the key and values(1) to the object till the length of an array
    }    
    nums.forEach(n=> {   delete s[n] })  //deleting if we have in nums
   return Object.keys(s) //getting from an object
}; console.log(findDisappearedNumbers([4,3,2,7,8,2,3,1]))
-------------------------------------------------------------------
To find unique values:
var kthDistinct = function(arr) {
  var unique = []
  arr.filter((item)=>{
    if(!unique.includes(item))
       {
         unique.push(item)
       }
    else {
        unique.splice(1,1)
    }
  })
 
  return unique
};
console.log(kthDistinct(["d","b","c","b","c","a"])) //[d,a]
=====================================================================================================================================================================
 Kth Distinct String in an Array: 
var kthDistinct = function(arr,k) {
  var unique = []
  arr.filter((item)=>{
    if(!unique.includes(item))
       {
         unique.push(item)
       }
    else {
        unique.splice(1,1)
    }
  })
 
  return unique[k-1] == undefined ? "" : unique[k-1]
   
};
//console.log(kthDistinct(["d","b","c","b","c","a"],2))*/
-------------------------------------------------------------------------------
var kthDistinct = function(arr, k) {
    let obj = {}
    let ans = []
    
    for (let item of arr) {
        obj[item] = obj[item] + 1 || 1
    } // arr.forEach(letter => map[letter] = map[letter] + 1 || 1)
    
    for (let item in obj) {
        if (obj[item] === 1) {
            ans.push(item)   
        }
    }
    
    return ans.length >= k ? ans[k-1] : ''
    
    
};
-------------------------------------------------------------------------------
const kthDistinct = (arr, k) => {
    const map = {}
    
    for (const word of arr) {
        if (!(word in map)) map[word] = 0
        
        map[word]++
    }

    const distinct = arr.filter(word => map[word] === 1)
    
    return distinct[k - 1] || ''
}
-------------------------------------------------------------------------------
const kthDistinct = (arr, k) => {
  const notDistinct = new Set(arr.filter((x, index, arr) => arr.indexOf(x) !== arr.lastIndexOf(x)));
  return arr.filter((x) => !notDistinct.has(x))[k - 1] ?? "";
};
-------------------------------------------------------------------------------
var kthDistinct = function(arr, k) {
    let freqs = {};
    for (let s of arr) freqs[s] = (freqs[s] || 0) + 1;
       
    return [...Object.keys(freqs)].filter(x => freqs[x] === 1)[k - 1] || "";
};
======================================================================================================================================================================
Merge Strings Alternately:
var mergeAlternately = function(word1, word2) {
    var merged = [];
    var w1 = word1.split("");
    var w2 = word2.split("");
    for(var i=0; i<word1.length || i< word2.length; i++){
        merged.push(word1[i])
        if( word2[i]){
            merged.push(word2[i])
        }
    }
    return merged.join("")
};
console.log(mergeAlternately("abc","pqr"))
